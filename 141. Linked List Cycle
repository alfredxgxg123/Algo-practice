Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.


class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head or not head.next:
            return False
        
        
        slowNode = head
        fastNode = head.next
        
        # while only end when while meets
        while slowNode != fastNode:
            
            # condition to end while loop if no cycle
            if not fastNode or not fastNode.next:
                return False
            
            slowNode = slowNode.next
            #so it will two steps ahead 
            fastNode = fastNode.next.next
            
        return True
        
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null) return false;
        boolean slow = head;
        boolean fast = head.next;
        
        
        //always two steps ahead
        while(slow != fast) {
            if(fast == null || fast.next == null) return fase;
            
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return true;
    }
}
