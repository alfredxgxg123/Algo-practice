Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]


class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        //use linkedlist to store
        
        List<List<Integer>> list = new LinkedList<>();
        if(root == null) return list;
        
        Queue<TreeNode> queue = new LinkedList<>();
        
        queue.add(root);
        //keep track of level
        boolean even = true;
        while(!queue.isEmpty()) {
            int size = queue.size();
            LinkedList<Integer> sublist = new LinkedList<>();
            for(int i = 0; i < size; i++) {
                TreeNode curr = queue.poll();
                
      
                //bfs add the left and right node first
                if(curr.left != null) {
                    queue.add(curr.left);
                }
                
                if(curr.right != null){
                    queue.add(curr.right);
                }
                
                //addfirst always add to the firs tone 
                if(even) {
                    sublist.add(curr.val);
                }else {
                    sublist.addFirst(curr.val);
                }
            }
            list.add(sublist);
            even = !even;
        }
        return list;
    }
}
