Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.


//loop each num
//check all possible steps
  //when reach the end, if:
    //if false return backtrack
    //if true return true

class Solution {
    public boolean canJump(int[] nums) {
        return jumpCheck(0, nums);
    }
    
    public boolean jumpCheck(int position, int[] nums) {
        if(position == nums.length - 1) {
          return true;
        }
        //steps from zero to max index
        int maxsteps = Math.min(position + nums[position], nums.length - 1);
        for(int i = maxsteps; i > position; i--) {
            if(jumpCheck(i, nums)) {
              return true;
            }
        }
        return false
    }
}

backtracking time 2^n space n result TLE


greedy:

go from end to beginning, check if it meets the index 0
class Solution {
    public boolean canJump(int[] nums) {
        int lastpost = nums.length - 1;
        for(int i = nums.length - 1; i >= 0; i--) {
            if(i + nums[i] >= lastpost) {
                lastpost = i;
            }
        }
        
        return lastpost == 0;
    } 
}


