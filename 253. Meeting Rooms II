Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

Example 1:

Input: [[0, 30],[5, 10],[15, 20]]
Output: 2
Example 2:

Input: [[7,10],[2,4]]
Output: 1

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        Arrays.sort(intervals, (a,b)->a[0]-b[0]);
        if(intervals.length == 0 || intervals == null) return 0;
        //MinHeap
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        // [[9,10],[4,9],[4,17]]
        // [4, 9]  
        // [4, 17]
        // [9, 10]
        //first end time
        minHeap.add(intervals[0][1]);

        for(int i = 1; i < intervals.length; i++) {
            if(minHeap.peek() <= intervals[i][0]) {
                //remove the min cause it was a done meeting incase 1,5 8,9 8,9. it will compare 5 with 8 two times
                minHeap.poll();
                //add the new one for the next to compare
                minHeap.add(intervals[i][1]);
            }else {
                //if the min heap is bigger than the interve you just add one

                minHeap.add(intervals[i][1]);
            }
        }
        
        return minHeap.size();
    }
}



class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals.length == 0 || intervals == null) return 0;
        
        int[] start = new int[intervals.length];
        int[] end = new int[intervals.length];
        for(int i = 0; i < intervals.length; i++) {
            start[i] = intervals[i][0];
            end[i] = intervals[i][1];
        }
        
        //0 5 15
        Arrays.sort(start);
        //10 20 30
        //two events happen before the first starting so we need two rooms
        //all the meeting time that ends
        Arrays.sort(end);
        
        
        int result = 0;
        int endInt = 0;
        for(int i = 0; i < start.length; i++) {
            if(end[endInt] > start[i]) {
                //when there is a conflict time
                result++;
            }else{
                //when the current meeting end
                endInt++;
            }
        }
        
        return result;
    }
}
