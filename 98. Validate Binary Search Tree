Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

//BST LEFT MID RIGHT
//inorder traversals
//dfs
class Solution {
    public boolean isValidBST(TreeNode root) {
        return helper(root, null, null);
    }
    
    public boolean helper(TreeNode node, int lower, int higher) {
        if(node == null) return true;
        
        int val = node.val;
        if(lower != null && val < lower) return false;
        if(higher != null &&& val > higher) return false;
        
        if(!(helper(node.right, val, higher))) return false;
        if(!(helper(node.left, lower, val))) return false;
        return true;
    }
}
