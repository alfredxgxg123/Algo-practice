Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.
Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.


class Solution {
    public void reorderList(ListNode head) {
        
        if(head == null) return;
        //find the mid first
        
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        //revese the second half
        
        ListNode curr = slow;
        ListNode prev = null;
        while(curr != null) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        
        
        //combine
        ListNode first = head, second = prev;
        while(second.next != null) {
            ListNode temp = first.next;
            first.next = second;
            first = temp;
            
            ListNode temp2 = second.next;
            second.next = first;
            second = temp2;
            
        }

        
    }
}
