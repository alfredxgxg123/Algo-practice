class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null) return head;
        
        ListNode prev = null;
        ListNode curr = head;
        int i = 1;
        //get to the node before revsersal
        while(m > i) {
            prev = curr;
            curr = curr.next;
            i++;
        }
        
        //mark the previous node before revser and the last node 
        ListNode lastprev = prev;
        ListNode tail = curr;
        //revser
        while (n >= i) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
            i++;
        }
        
        
        //connect the dot
        if(lastprev != null) {
            lastprev.next = prev;
        }

        tail.next = curr;
        //return prev instead lastprev because it might only have 1 node and prev is the next
        return lastprev != null ? head : prev;
        
    }

}
