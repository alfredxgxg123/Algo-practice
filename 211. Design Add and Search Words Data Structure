class TrieNode {
    char val;
    TrieNode[] children;
    boolean isWord;
    
    public TrieNode(char c) {
        val = c;
        children = new TrieNode[26];
        isWord = false;
    }
}

class WordDictionary {
    private TrieNode root;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode(' ');
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode curr = root;
        for(int i  = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if(curr.children[c-'a'] == null) {
                curr.children[c-'a'] = new TrieNode(c);
            }
            curr = curr.children[c-'a'];
        }
        curr.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return searchInNode(word, root);
    }
    public boolean searchInNode(String word, TrieNode curr) {
        
        //it means you are at the end already. curr its the bottom of the leaf
        if(word.length() == 0 || word == null) {
            return curr.isWord;
        }
        if(word.charAt(0) != '.') {
            
            //check if the curr charac exist or not and go deeper into the next char of the word 
            return curr.children[word.charAt(0) - 'a'] != null && searchInNode(word.substring(1), curr.children[word.charAt(0) - 'a']);
        } else {
            //when char == .
            //search all 26 
            for(int i = 0; i < curr.children.length; i++) {
                //when it exits in the dict
                if(curr.children[i] != null) {
                    //go deeper
                    if(searchInNode(word.substring(1), curr.children[i])) {
                        //when gets to then end then return true
                        return true;
                    }
                }
            }
        }
        //after checking all still not giving you an answer then false 
        return false;      
    }
}
