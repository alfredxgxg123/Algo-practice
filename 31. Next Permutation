Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1


class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length == 0) return;
        int replace = nums.length - 2; //second to last
        
        //go front second to last and compare the two
        //until you find one that is smaller than the left one
        //1 2 6 4 2   -? 2 - 6
        while(replace >= 0) {
            if(nums[replace] < nums[replace+1]) break;
            replace--;
        }
        
        //condition where 654321 -> 123456
        if(replace < 0 ) { 
            Arrays.sort(nums);
            return;
        }
        
        //now found 2
        
        //i need to find the the next bigger one from 2 by find the one tahts euqal or smaller
        int to_replace = replace + 1;
       while(to_replace < nums.length && nums[to_replace] > nums[replace]) {
            to_replace++;
        }
        
        //swap the num
        int temp = nums[replace];
        nums[replace] = nums[to_replace-1];
        nums[to_replace-1] = temp;
        //now its 1 4 [6 2 2]
        
        //sort the rest
        Arrays.sort(nums, replace+1, nums.length);
    }
}

// 321 -> return 123 bc no num bigger than him
// 12642 -> 14226 is the next bigger one
// 1 4 [6 2 2] -> 1 4 reoder -> 1 4 2 2 6
