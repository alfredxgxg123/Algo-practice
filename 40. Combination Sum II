Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        bfs(ans, candidates, new ArrayList<>(), target, 0);
        return ans;
    }
    
    private void bfs(List<List<Integer>> ans, int[] nums, List<Integer> temp, int remain, int start) {
        if(remain < 0){
          return;
        } else if(remain == 0) {
          ans.add(new ArrayList<>(temp));
          return;
        } else {
          for(int i = start; i < nums.length; i++){
            if(i > start && nums[i] == nums[i-1]) continue;
            else{
              temp.add(nums[i]);
              bfs(ans, nums, temp, remain - nums[i], i + 1);
              temp.remove(temp.size() - 1);
            }
          }
        }
    }
}
