Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list.
Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output: 5

Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Set<String> set = new HashSet<>(wordList);
        
        //use queue to keep track of bfs
        Queue<String> queue = new LinkedList<>();

        queue.add(beginWord);
        int count = 1;
        while(!queue.isEmpty()) {
            
            int size = queue.size();
            // take all the bfs match 
            for(int i = 0; i < size; i++) {
                char[] curr = queue.poll().toCharArray();
                
                // for each of the char
                for(int j  = 0; j < curr.length; j++) {
                    char temp = curr[j];
                    
                    //swap with a-z
                    for(char c = 'a'; c <= 'z'; c++) {
                        curr[j] = c;
                        //combin them into string
                        String next = new String(curr);
                        
                        //check the set to see if in there if yes, means still not yet visited 
                        if(set.contains(next)) {
                            //if its the end word then return 
                            if(next.equals(endWord)) return count+1;
                            
                            //else add to queue 
                            queue.add(next);
                            //remove duplication 
                            set.remove(next);
                        }
                    }
                    //after added all the combination replce it back 
                    curr[j] = temp;
                }
            }
            //new round after a letter chagned  count increment every level
            count++;
 
        }
        return 0;
    }
}
