Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

 

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3


class Solution {
    public int kthSmallest(TreeNode root, int k) {
        //stack first in last out
        LinkedList<TreeNode> stack = new LinkedList<>();
        //[3, 1]
        while(true) {
            // go down all the way to the bottom
            //left
            while(root != null) {
                stack.add(root);
                root = root.left;
            }
            //get the last one that got in which is 1
            //print 
            root = stack.removeLast();
            k--;
            if(k == 0) return root.val;
            //right
            root = root.right;
        }
    }
}


class Solution {
    public int kthSmallest(TreeNode root, int k) {
        ArrayList<Integer> ans = new ArrayList<>();
        inorder(root, ans);
        return ans.get(k-1);
    }
    
    public ArrayList<Integer> inorder(TreeNode root, ArrayList<Integer> ans) {
        if(root == null) return ans;
        inorder(root.left, ans);
        ans.add(root.val);
        inorder(root.right, ans);
        return ans;
    }
}
