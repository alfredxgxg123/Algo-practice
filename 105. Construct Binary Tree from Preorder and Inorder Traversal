Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

// in 4 2 1 5 3
// pre 1 2 4 3 5
//   1
// 2  3
//4  5
class Solution {
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || inorder == null || preorder.length == 0 || inorder.length == 0 || preorder.length != preorder.length) return null;
        return buildTreeHelper(preorder, inorder, 0, 0, preorder.length - 1); 
    };
    
    
    public TreeNode buildTreeHelper(int[] preorder, int[] inorder, int pre_st, int in_st, int in_end) {
        if(pre_st > preorder.length || in_st > in_end) return null;
        TreeNode current = new TreeNode(preorder[pre_st]);
        
        
        //find the preorder root in inorder index;
        int i = in_st;
        while(i <= in_end) {
            if(inorder[i] == preorder[pre_st]) break;
            i++;
        }
        //                                               pre_st + 1 == the next root at the preorder array 
        //                                              in_st == 0  i == pre_St-1
        current.left = buildTreeHelper(preorder, inorder, pre_st + 1, in_st, i - 1);
        //                                             i-in_st+1 == getting the left of inorder nodes
        current.right = buildTreeHelper(preorder, inorder, pre_st+(i-in_st+1), i+1, in_end);
        return current;
    }
}
