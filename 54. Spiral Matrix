Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],         
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

go right go down go left go up layer by layer
Output: [1,2,3,6,9,8,7,4,5]

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List ans = new ArrayList();
        if(matrix.length == 0) {
            return ans;
        }
        
        int r1 = 0, r2 = matrix.length - 1;
        int c1 = 0, c2 = matrix[0].length - 1;
        int direction = 0;
        while(r1 <= r2 && c1 <= c2) {
          if(direction == 0) {
            for(int i = c1; i <= c2; i++) {
              ans.add(matrix[r1][i]);
            }
            r1++;
            direction = 1;
          } else if(direction == 1) {
            for(int i = r1; i <= r2; i++) {
              ans.add(matrix[i][c2]);
            }
            c2--;
            direction = 2;
          } else if (direction == 2) {
            for(int i = c2; i >= c1; i--) {
              ans.add(matrix[r2][i]);
            }
            r2--;
            direction = 3;
          } else {
            for(int i = r2; i >= r1; i--) {
              ans.add(matrix[i][c1]);
            }
            c1++;
            direction = 0;
          }
          
        }
        return ans;
    }
}
