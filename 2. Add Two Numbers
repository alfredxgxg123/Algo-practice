You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode node1 = l1;
        ListNode node2 = l2;
        
        int carry = 0;
        ListNode head = new ListNode(0);
        ListNode curr = head;
        while(node1 != null || node2 != null) {
            int x  = node1 == null ? 0 : node1.val;
            int y  = node2 == null ? 0 : node2.val;
            
            int sum = carry + x + y;
            carry  = sum > 9 ? 1 : 0;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if(node1 != null) node1 = node1.next;
            if(node2 != null) node2 = node2.next;
        }
        //check the last one
        if(carry > 0) curr.next = new ListNode(carry);
        
        return head.next;
    }
}
